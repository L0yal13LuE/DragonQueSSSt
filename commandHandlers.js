const { EmbedBuilder } = require('discord.js');
const { getUser, getUserItems, getMonsterForDate, getTotalDamageDealt } = require('./dbUtils');
const { calculateNextLevelExp, getTodaysDateString } = require('./gameLogic');

/**
 * Handles the '!rank' command with a fancier embed and progress bar. Works in any channel.
 * @param {object} message - Discord message object.
 * @param {object} supabase - Supabase client instance.
 */
const handleRankCommand = async (message, supabase) => {
    if (!supabase) {
        message.reply('‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡πâ‡∏≤ üò•'); // Thai Error
        return;
    }

    const userId = message.author.id;
    const username = message.author.username;
    const userAvatar = message.author.displayAvatarURL(); // Get user avatar URL

    try {
        const userData = await getUser(supabase, userId);
        if (userData) {
            const userLevel = userData.level;
            const userExp = userData.current_exp;
            const nextLevelExp = calculateNextLevelExp(userLevel);

            // --- Progress Bar Calculation ---
            const totalBlocks = 10; // Number of blocks in the progress bar
            let filledBlocks = 0;
            let percentage = 0;

            if (nextLevelExp > 0) { // Avoid division by zero
                const cappedExp = Math.min(userExp, nextLevelExp);
                percentage = (cappedExp / nextLevelExp) * 100;
                filledBlocks = Math.floor(percentage / (100 / totalBlocks));
            } else {
                filledBlocks = totalBlocks; // Max out bar if next level isn't defined properly
                percentage = 100;
            }

            const emptyBlocks = totalBlocks - filledBlocks;
            const progressBar = 'üü©'.repeat(filledBlocks) + '‚¨õ'.repeat(emptyBlocks);
            // --- End Progress Bar Calculation ---

            const rankEmbed = new EmbedBuilder()
                .setColor(0xFFD700) // Gold color for flair
                .setTitle(`üåü ‡πÄ‡∏•‡πÄ‡∏ß‡∏• üåü`)
                .setDescription(`${message.author.toString()} ‡∏Ç‡∏≠‡∏™‡πà‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ã‡∏¥‡∏ß‡πà‡∏≤‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡πÑ‡∏´‡∏ô‡πÅ‡∏•‡πâ‡∏ß!`)
                .setThumbnail(userAvatar)
                .addFields(
                    { name: '‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', value: `**${userLevel}**`, inline: true },
                    { name: '‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå (EXP)', value: `${userExp} / ${nextLevelExp}`, inline: true },
                    { name: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏ñ‡∏±‡∏î‡πÑ‡∏õ', value: `${progressBar} (${percentage.toFixed(1)}%)`, inline: false }
                )
                .setFooter({ text: `‡∏™‡∏∞‡∏™‡∏° EXP ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏∞ ‡∏™‡∏π‡πâ‡πÜ! üí™` })
                .setTimestamp();

            message.reply({ embeds: [rankEmbed] });
            console.log(`[${username}] Replied to !rank in channel ${message.channel.name}.`);

        } else {
            message.reply('‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏•‡∏¢‡∏ô‡∏∞! ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡πá‡∏ö EXP ‡∏™‡∏¥! üí™'); // Thai Encouragement
            console.log(`[${username}] User not found for !rank.`);
        }
    } catch (error) {
        console.error('Error during rank command:', error);
        message.reply('‡∏≠‡∏∏‡πä‡∏õ‡∏™‡πå! ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞'); // Thai Error
    }
};

/**
 * Handles the '!chat' command.
 */
const handleChatCommand = async (message, args) => {
    const userMessage = args.join(' ');
    if (!userMessage) {
        message.reply('‡∏•‡∏∑‡∏°‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∂‡πÄ‡∏õ‡∏•‡πà‡∏≤? ‡∏ö‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏™‡∏¥‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£ üòâ');
        return;
    }
    try {
        await message.channel.send(userMessage);
        console.log(`[${message.author.username}] Repeated chat message.`);
    } catch (error) {
        console.error('Error sending chat reply:', error);
        message.reply('‡∏≠‡πà‡∏≤... ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏Æ‡∏∞ ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ó‡∏µ üôè');
    }
};

/**
 * Handles the '!bag' command.
 */
const handleBagCommand = async (message, supabase) => {
    if (!supabase) {
        message.reply('‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡πâ‡∏≤ üò•');
        return;
    }
    const userId = message.author.id;
    const username = message.author.username;
    try {
        const userItems = await getUserItems(supabase, userId);
        // Group items by name before displaying
        const groupedItems = (userItems || []).reduce((acc, item) => {
             const key = item.itemname;
             if (!acc[key]) {
                 acc[key] = { emoji: item.itememoji, name: item.itemname, amount: 0 };
             }
             acc[key].amount += item.itemamount;
             return acc;
        }, {});

        const itemList = Object.values(groupedItems).length > 0
            ? Object.values(groupedItems).map(value => `${value.emoji} ${value.name}: ${value.amount}`).join('\n')
            : "‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏•‡∏¢... ‡πÅ‡∏ä‡∏ó‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞!";

        const bagEmbed = new EmbedBuilder()
            .setColor(0x8A2BE2)
            .setTitle(`üéí ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô üéí`)
            .setDescription(`${message.author.toString()} ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏™‡∏¥\n\n${itemList}`)
            .setFooter({ text: `‡∏™‡∏∞‡∏™‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏ô‡∏∞‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• üòâ` })
            .setTimestamp();
        message.reply({ embeds: [bagEmbed] });
        console.log(`[${username}] Replied to !bag.`);
    } catch (error) {
        console.error('Error during bag command:', error);
        message.reply('‡∏≠‡∏∏‡πä‡∏õ‡∏™‡πå! ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞');
    }
};

/**
 * Handles the '!monster' command to show today's monster status.
 */
const handleMonsterCommand = async (message, supabase, currentMonsterState) => {
    if (!supabase) {
        message.reply('‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏°‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡πâ‡∏≤ üò•');
        return;
    }
    const today = getTodaysDateString();
    console.log(`[${message.author.username}] Requested monster status for ${today}.`);
    try {
        // Use cached state if available and for today, otherwise fetch
        let monsterData = currentMonsterState && currentMonsterState.spawn_date === today
            ? currentMonsterState
            : await getMonsterForDate(supabase, today);

        if (monsterData) {
            let status = monsterData.is_alive ? "‚öîÔ∏è" : "‚ò†Ô∏è";
            let remainingHpText = "0";
            let color = monsterData.is_alive ? 0xFF4500 : 0x32CD32; // Orange if alive, Green if dead

            if (monsterData.is_alive) {
                const totalDamage = await getTotalDamageDealt(supabase, today);
                const remainingHp = Math.max(0, monsterData.max_hp - totalDamage);
                remainingHpText = remainingHp.toString();
                if (remainingHp <= 0) {
                    status = "‚ò†Ô∏è (‡∏£‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó)"; // Indicate defeat is imminent or pending update
                    color = 0x32CD32; // Show green if HP is 0 or less
                }
            }

            const monsterEmbed = new EmbedBuilder()
                .setColor(color)
                .setTitle(`üëΩ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (${today}) ü¶ë`)
                .addFields(
                    { name: '‡∏ä‡∏∑‡πà‡∏≠', value: monsterData.name, inline: true },
                    { name: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', value: `**${status}**`, inline: true },
                    { name: '‡∏û‡∏•‡∏±‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï (HP)', value: `${remainingHpText} / ${monsterData.max_hp}`, inline: true },
                )
                .setTimestamp();

            if (!monsterData.is_alive && monsterData.killed_by_user_id) {
                monsterEmbed.addFields({ name: '‡∏õ‡∏¥‡∏î‡∏à‡πä‡∏≠‡∏ö‡πÇ‡∏î‡∏¢', value: `<@${monsterData.killed_by_user_id}>`, inline: true });
            }
            if (!monsterData.is_alive && monsterData.killed_at_timestamp) {
                monsterEmbed.addFields({ name: '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏ö', value: `<t:${Math.floor(new Date(monsterData.killed_at_timestamp).getTime() / 1000)}:R>`, inline: true });
            }
            message.reply({ embeds: [monsterEmbed] });
        } else {
            message.reply(`‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏¥‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (${today}) ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞! üò¥`);
            console.log(`No monster found for ${today} via !monster command.`);
        }
    } catch (error) {
        console.error('Error during monster command:', error);
        message.reply('‡∏≠‡∏∏‡πä‡∏õ‡∏™‡πå! ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏∞');
    }
};

module.exports = {
    handleRankCommand, handleChatCommand, handleBagCommand, handleMonsterCommand
};